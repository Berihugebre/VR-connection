version: 2.1
#defines "in what" to run things
executors:
  node:
    docker:
      - image: node 
commands:
  build:
    description: |
      Create a production build
    steps:
    - run:
        command: mkdir -p artifacts
        name: Ensure artifacts directory is present
    - run: NODE_ENV=production yarn build
    - run: cp -r build artifacts
  coverage:
    description: |
      Generate coverage report using Jest and Istanbul
    steps:
    - run: yarn test --collectCoverage --coverageDirectory=./artifacts/coverage
  eslint:
    description: |
      Lint JS
    steps:
    - run:
        command: mkdir -p reports/eslint
        name: Ensure artifacts directory is present
    - run: yarn eslint --max-warnings=0 --format junit --output-file ./reports/eslint/eslint.xml
  install:
    description: |
      Install dependencies
    steps:
    - run: yarn install
  stylelint:
    description: |
      Lint style files
    steps:
    - run:
        command: mkdir -p artifacts/stylelint
        name: Ensure artifacts directory is present
    - run: yarn --silent stylelint --custom-formatter './node_modules/stylelint-junit-formatter'
        > ./artifacts/stylelint/stylelint.xml
  test:
    description: |
      Run tests using Jest
    steps:
    - run:
        command: yarn add --dev jest-junit
        name: Install JUnit reporter
    - run:
        command: yarn test --ci --runInBand --reporters=default --reporters=jest-junit
        environment:
          JEST_JUNIT_OUTPUT: reports/junit/js-test-results.xml
        name: Run tests with JUnit as reporter

jobs:
  build:
    working_directory: frontend/
    description: |
      Build the application in production mode. The built assets are stored in artifacts.
    executor: node
    steps:
    - attach_workspace:
        at: ~/
    - build
    - store_artifacts:
        path: ./artifacts
  coverage:
    working_directory: frontend/
    description: |
      Run the tests and generate coverage reports. The results are stored into artifacts.
    executor: node
    steps:
    - attach_workspace:
        at: ~/
    - coverage
    - store_artifacts:
        path: ./artifacts
  eslint:
    working_directory: frontend/
    description: |
      Run ESLint on the source code. The generated report is stored in artifacts.
    executor: node
    steps:
    - attach_workspace:
        at: ~/
    - eslint
    - store_test_results:
        path: reports/eslint
    - store_artifacts:
        path: reports/eslint
  install:
    working_directory: frontend/
    description: |
      Install dependencies. Checkout is called before install. (Optional) To prevent checkout from being called, pass your steps to before_install.
    executor: node
    parameters:
      before_install:
        default:
        - checkout
        description: |
          Steps to be executed before restoring cache and running install. Default is to run 'checkout' command.
        type: steps
    steps:
    - steps: <<parameters.before_install>>
    - restore_cache:
        key: v1-node-modules-{{ checksum "yarn.lock" }}
    - install
    - persist_to_workspace:
        paths:
        - project
        root: ~/
    - save_cache:
        key: v1-node-modules-{{ checksum "yarn.lock" }}
        paths:
        - ~/project/node_modules
  stylelint:
    working_directory: frontend/
    description: |
      Run stylelint command on CSS files. The result is stored in artifacts.
    executor: node
    steps:
    - attach_workspace:
        at: ~/
    - run:
        command: mkdir -p artifacts/stylelint
        name: Set up artifacts directory
    - stylelint
    - store_test_results:
        path: ./artifacts
    - store_artifacts:
        path: ./artifacts
  test:
    working_directory: frontend/
    description: |
      Run tests and show results in the test summary.
    executor: node
    steps:
    - attach_workspace:
        at: ~/
    - test
    - store_test_results:
        path: reports/junit
    - store_artifacts:
        path: reports/junit

workflows:
  frontend-push:
    jobs:
      - install
      - eslint:
          requires:
          - install
      - stylelint:
          requires:
          - install
      - test:
          requires:
          - install
      - coverage:
          requires:
          - install
    

#jobs:
#  test:
#    docker:
#      - image: node
#    steps:
#      - checkout:
#        path: ~/repo
#      - run:
#          name: install
#          working_directory: ~/repo/app/
#          command: |
#            yarn install 
#      - run:
#          name: test
#          working_directory: app/
#          command: |
#            yarn test
#  build:
#    docker:
#      - image: node
#    steps:
#      - checkout
#      - run:
#          name: install
#          working_directory: app/
#          command: |
#            yarn install 
#      - run:
#          name: build
#          working_directory: app/
#          command: |
#            yarn build


